-- Scripts para Supervisión Perimetral en Oracle

-- Creación de tablas principales

CREATE TABLE Perimeter_Surveillance (
    Surveillance_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Area_ID NUMBER NOT NULL,
    Surveillance_Type VARCHAR2(50) CHECK (Surveillance_Type IN ('Intrusion Detection', 'Sensor Monitoring', 'Drone Patrol')),
    Start_Time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    End_Time TIMESTAMP,
    Status VARCHAR2(20) CHECK (Status IN ('Active', 'Inactive', 'Triggered')),
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Updated_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Sensors (
    Sensor_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Area_ID NUMBER NOT NULL,
    Sensor_Type VARCHAR2(50) CHECK (Sensor_Type IN ('Motion', 'Infrared', 'Vibration', 'Sound')),
    Status VARCHAR2(20) CHECK (Status IN ('Active', 'Inactive')),
    Last_Activity TIMESTAMP,
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Updated_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Drones (
    Drone_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Patrol_Area_ID NUMBER NOT NULL,
    Drone_Status VARCHAR2(20) CHECK (Drone_Status IN ('Available', 'Deployed', 'Maintenance')),
    Last_Patrol TIMESTAMP,
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Updated_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Registro de eventos
CREATE TABLE Surveillance_Events (
    Event_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Surveillance_ID NUMBER REFERENCES Perimeter_Surveillance(Surveillance_ID),
    Event_Type VARCHAR2(50) CHECK (Event_Type IN ('Intrusion Detected', 'Sensor Triggered', 'Drone Alert')),
    Event_Description VARCHAR2(500),
    Event_Time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Notificaciones
CREATE TABLE Notifications (
    Notification_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Event_ID NUMBER REFERENCES Surveillance_Events(Event_ID),
    Recipient VARCHAR2(100),
    Notification_Method VARCHAR2(50) CHECK (Notification_Method IN ('Email', 'SMS', 'Push Notification')),
    Sent_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Status VARCHAR2(20) CHECK (Status IN ('Sent', 'Pending', 'Failed')),
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Auditoría
CREATE TABLE Audit_Log (
    Audit_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Action_Type VARCHAR2(50),
    Action_Description VARCHAR2(500),
    Performed_By VARCHAR2(100),
    Action_Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Relaciones entre módulos
-- Relación con Vigilancia y Monitoreo
CREATE TABLE Monitoring_Perimeter_Link (
    Link_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Monitoring_ID NUMBER REFERENCES Monitoring(Monitoring_ID),
    Perimeter_ID NUMBER REFERENCES Perimeter_Surveillance(Surveillance_ID),
    Linked_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Procedimientos almacenados
CREATE OR REPLACE PROCEDURE Log_Event (
    p_surveillance_id IN NUMBER,
    p_event_type IN VARCHAR2,
    p_event_description IN VARCHAR2
) AS
BEGIN
    INSERT INTO Surveillance_Events (Surveillance_ID, Event_Type, Event_Description)
    VALUES (p_surveillance_id, p_event_type, p_event_description);

    -- Registrar en auditoría
    INSERT INTO Audit_Log (Action_Type, Action_Description, Performed_By)
    VALUES ('Event Logged', 'Event type: ' || p_event_type || ' - ' || p_event_description, USER);
END;
/

-- Trigger para actualizar la fecha de modificación
CREATE OR REPLACE TRIGGER Update_Timestamp
BEFORE UPDATE ON Perimeter_Surveillance
FOR EACH ROW
BEGIN
    :NEW.Updated_At := CURRENT_TIMESTAMP;
END;
/

-- Consultas de monitoreo
CREATE OR REPLACE VIEW Active_Surveillance_View AS
SELECT ps.Surveillance_ID, ps.Area_ID, ps.Surveillance_Type, ps.Status, e.Event_Description, e.Event_Time
FROM Perimeter_Surveillance ps
LEFT JOIN Surveillance_Events e ON ps.Surveillance_ID = e.Surveillance_ID
WHERE ps.Status = 'Active';

-- Función para verificar actividad reciente
CREATE OR REPLACE FUNCTION Check_Recent_Activity (p_sensor_id IN NUMBER) RETURN VARCHAR2 AS
    v_last_activity TIMESTAMP;
BEGIN
    SELECT Last_Activity INTO v_last_activity FROM Sensors WHERE Sensor_ID = p_sensor_id;
    IF v_last_activity >= SYSTIMESTAMP - INTERVAL '1' HOUR THEN
        RETURN 'Active';
    ELSE
        RETURN 'Inactive';
    END IF;
END;
/
