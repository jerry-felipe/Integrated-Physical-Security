-- Creación de tablas principales para el módulo de Alarmas y Respuesta

-- Tabla para configurar tipos de alarmas
CREATE TABLE tipos_alarmas (
    id_tipo_alarma NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(255),
    nivel_prioridad NUMBER CHECK (nivel_prioridad BETWEEN 1 AND 5),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla para el registro de alarmas
CREATE TABLE alarmas (
    id_alarma NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_tipo_alarma NUMBER NOT NULL,
    descripcion VARCHAR2(255),
    fecha_activacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR2(50) CHECK (estado IN ('ACTIVA', 'RESUELTA', 'FALLIDA')) DEFAULT 'ACTIVA',
    FOREIGN KEY (id_tipo_alarma) REFERENCES tipos_alarmas(id_tipo_alarma)
);

-- Tabla para asignar alarmas al personal de seguridad
CREATE TABLE asignaciones_alarmas (
    id_asignacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_alarma NUMBER NOT NULL,
    id_personal NUMBER NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    respuesta VARCHAR2(255),
    fecha_respuesta TIMESTAMP,
    FOREIGN KEY (id_alarma) REFERENCES alarmas(id_alarma),
    FOREIGN KEY (id_personal) REFERENCES personal_seguridad(id_personal)
);

-- Tabla para simulacros y pruebas de sistemas de alarma
CREATE TABLE simulacros (
    id_simulacro NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descripcion VARCHAR2(255),
    fecha_ejecucion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resultado VARCHAR2(50) CHECK (resultado IN ('EXITO', 'FALLIDO', 'EN PROGRESO')),
    id_tipo_alarma NUMBER,
    FOREIGN KEY (id_tipo_alarma) REFERENCES tipos_alarmas(id_tipo_alarma)
);

-- Relación con notificaciones
CREATE TABLE notificaciones_alarmas (
    id_notificacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_alarma NUMBER NOT NULL,
    mensaje VARCHAR2(255),
    fecha_envio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    destinatario VARCHAR2(100),
    estado VARCHAR2(50) CHECK (estado IN ('ENVIADA', 'PENDIENTE', 'FALLIDA')),
    FOREIGN KEY (id_alarma) REFERENCES alarmas(id_alarma)
);

-- Tabla para auditoría de alarmas
CREATE TABLE auditoria_alarmas (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_alarma NUMBER NOT NULL,
    accion VARCHAR2(255),
    usuario VARCHAR2(100),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_alarma) REFERENCES alarmas(id_alarma)
);

-- Procedimientos y triggers

-- Procedimiento para activar una alarma y generar notificaciones
CREATE OR REPLACE PROCEDURE activar_alarma (
    p_id_tipo_alarma IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_destinatarios IN SYS.ODCIVARCHAR2LIST
) AS
    v_id_alarma NUMBER;
BEGIN
    -- Crear la alarma
    INSERT INTO alarmas (id_tipo_alarma, descripcion)
    VALUES (p_id_tipo_alarma, p_descripcion)
    RETURNING id_alarma INTO v_id_alarma;

    -- Generar notificaciones
    FOR i IN 1..p_destinatarios.COUNT LOOP
        INSERT INTO notificaciones_alarmas (id_alarma, mensaje, destinatario, estado)
        VALUES (v_id_alarma, 'Alarma activada: ' || p_descripcion, p_destinatarios(i), 'PENDIENTE');
    END LOOP;
END activar_alarma;
/

-- Trigger para registrar eventos en auditoría
CREATE OR REPLACE TRIGGER trg_auditoria_alarmas
AFTER INSERT OR UPDATE OR DELETE ON alarmas
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_alarmas (id_alarma, accion, usuario, fecha)
    VALUES (:NEW.id_alarma, CASE
        WHEN INSERTING THEN 'INSERT'
        WHEN UPDATING THEN 'UPDATE'
        WHEN DELETING THEN 'DELETE'
    END, USER, SYSTIMESTAMP);
END trg_auditoria_alarmas;
/

-- Visualización para reportes
CREATE OR REPLACE VIEW vw_alarmas_resumen AS
SELECT 
    a.id_alarma,
    t.nombre AS tipo_alarma,
    a.descripcion,
    a.fecha_activacion,
    a.estado,
    COUNT(n.id_notificacion) AS total_notificaciones,
    COUNT(aa.id_asignacion) AS total_asignaciones
FROM alarmas a
LEFT JOIN tipos_alarmas t ON a.id_tipo_alarma = t.id_tipo_alarma
LEFT JOIN notificaciones_alarmas n ON a.id_alarma = n.id_alarma
LEFT JOIN asignaciones_alarmas aa ON a.id_alarma = aa.id_alarma
GROUP BY a.id_alarma, t.nombre, a.descripcion, a.fecha_activacion, a.estado;

-- Ejemplo de uso del procedimiento
DECLARE
    v_destinatarios SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('guardia1@gmail.com', 'guardia2@gmail.com');
BEGIN
    activar_alarma(1, 'Intrusión detectada en el perímetro norte', v_destinatarios);
END;
