-- Creación de las tablas para el módulo Gestión de Emergencias
-- Incluye identificación de incidentes críticos, activación de protocolos y registro de eventos

-- Tabla para los tipos de incidentes críticos
CREATE TABLE tipos_incidente (
    id_tipo_incidente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descripcion VARCHAR2(255) NOT NULL,
    nivel_critico NUMBER CHECK (nivel_critico BETWEEN 1 AND 5),
    fecha_creacion DATE DEFAULT SYSDATE
);

-- Tabla para registrar los incidentes críticos
CREATE TABLE incidentes_criticos (
    id_incidente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_tipo_incidente NUMBER REFERENCES tipos_incidente(id_tipo_incidente),
    fecha_ocurrencia TIMESTAMP DEFAULT SYSTIMESTAMP,
    ubicacion VARCHAR2(255),
    descripcion VARCHAR2(4000),
    estado VARCHAR2(50) CHECK (estado IN ('En progreso', 'Resuelto', 'Pendiente')),
    registrado_por NUMBER REFERENCES usuarios(id_usuario)
);

-- Tabla para protocolos de emergencia
CREATE TABLE protocolos_emergencia (
    id_protocolo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_protocolo VARCHAR2(255) NOT NULL,
    descripcion VARCHAR2(4000),
    autoridad_responsable VARCHAR2(255),
    ultima_actualizacion DATE DEFAULT SYSDATE
);

-- Relación entre incidentes y protocolos activados
CREATE TABLE protocolos_activados (
    id_activacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_incidente NUMBER REFERENCES incidentes_criticos(id_incidente),
    id_protocolo NUMBER REFERENCES protocolos_emergencia(id_protocolo),
    fecha_activacion TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Tabla para la coordinación con cuerpos de emergencia
CREATE TABLE cuerpos_emergencia (
    id_cuerpo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(255) NOT NULL,
    tipo VARCHAR2(100) CHECK (tipo IN ('Bomberos', 'Policía', 'Servicios Médicos')),
    contacto VARCHAR2(100),
    direccion VARCHAR2(255)
);

-- Relación entre incidentes y cuerpos de emergencia involucrados
CREATE TABLE incidentes_cuerpos_emergencia (
    id_relacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_incidente NUMBER REFERENCES incidentes_criticos(id_incidente),
    id_cuerpo NUMBER REFERENCES cuerpos_emergencia(id_cuerpo),
    fecha_notificacion TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Tabla para registrar eventos post-emergencia
CREATE TABLE registro_eventos_post_emergencia (
    id_evento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_incidente NUMBER REFERENCES incidentes_criticos(id_incidente),
    descripcion_evento VARCHAR2(4000),
    fecha_evento TIMESTAMP DEFAULT SYSTIMESTAMP,
    registrado_por NUMBER REFERENCES usuarios(id_usuario)
);

-- Registro de auditoría
CREATE TABLE auditoria_emergencias (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_incidente NUMBER REFERENCES incidentes_criticos(id_incidente),
    accion VARCHAR2(255),
    realizado_por NUMBER REFERENCES usuarios(id_usuario),
    fecha TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Trigger para registrar automáticamente en auditoría cuando se inserta un nuevo incidente crítico
CREATE OR REPLACE TRIGGER trg_auditoria_incidente
AFTER INSERT ON incidentes_criticos
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_emergencias (id_incidente, accion, realizado_por, fecha)
    VALUES (:NEW.id_incidente, 'Nuevo incidente registrado', :NEW.registrado_por, SYSTIMESTAMP);
END;
/

-- Vista para reportes de análisis post-emergencia
CREATE OR REPLACE VIEW vista_analisis_post_emergencia AS
SELECT 
    i.id_incidente,
    t.descripcion AS tipo_incidente,
    i.fecha_ocurrencia,
    i.ubicacion,
    i.estado,
    r.descripcion_evento,
    r.fecha_evento
FROM 
    incidentes_criticos i
JOIN 
    tipos_incidente t ON i.id_tipo_incidente = t.id_tipo_incidente
LEFT JOIN 
    registro_eventos_post_emergencia r ON i.id_incidente = r.id_incidente;

-- Procedimiento para activar un protocolo durante un incidente
CREATE OR REPLACE PROCEDURE activar_protocolo (
    p_id_incidente NUMBER,
    p_id_protocolo NUMBER
) IS
BEGIN
    INSERT INTO protocolos_activados (id_incidente, id_protocolo, fecha_activacion)
    VALUES (p_id_incidente, p_id_protocolo, SYSTIMESTAMP);

    -- Notificación para los usuarios responsables
    INSERT INTO notificaciones (id_usuario, mensaje, fecha_envio)
    SELECT id_usuario, 'Protocolo activado para el incidente ' || p_id_incidente, SYSTIMESTAMP
    FROM usuarios WHERE rol = 'Coordinador';
END activar_protocolo;
/

-- Procedimiento para registrar un evento post-emergencia
CREATE OR REPLACE PROCEDURE registrar_evento_post_emergencia (
    p_id_incidente NUMBER,
    p_descripcion_evento VARCHAR2,
    p_registrado_por NUMBER
) IS
BEGIN
    INSERT INTO registro_eventos_post_emergencia (id_incidente, descripcion_evento, registrado_por)
    VALUES (p_id_incidente, p_descripcion_evento, p_registrado_por);

    -- Registro en auditoría
    INSERT INTO auditoria_emergencias (id_incidente, accion, realizado_por, fecha)
    VALUES (p_id_incidente, 'Evento post-emergencia registrado', p_registrado_por, SYSTIMESTAMP);
END registrar_evento_post_emergencia;
/
