-- Creación de tablas principales para el módulo de Reportes y Auditoría

-- Tabla para almacenamiento de reportes
CREATE TABLE reportes (
    id_reporte NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(255) NOT NULL,
    descripcion CLOB,
    fecha_generacion DATE DEFAULT SYSDATE NOT NULL,
    tipo_reporte VARCHAR2(50) CHECK (tipo_reporte IN ('Diario', 'Semanal', 'Mensual', 'Personalizado')),
    generado_por VARCHAR2(100),
    archivo_reporte BLOB,
    modulo_origen VARCHAR2(100),
    estado VARCHAR2(50) CHECK (estado IN ('Pendiente', 'Completado', 'Error'))
);

-- Tabla para auditoría de eventos
CREATE TABLE auditoria_eventos (
    id_evento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha_evento TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    usuario VARCHAR2(100) NOT NULL,
    accion VARCHAR2(255) NOT NULL,
    modulo_afectado VARCHAR2(100),
    detalle_evento CLOB,
    nivel_severidad VARCHAR2(50) CHECK (nivel_severidad IN ('Bajo', 'Medio', 'Alto', 'Crítico'))
);

-- Tabla para configuraciones de auditoría
CREATE TABLE configuracion_auditoria (
    id_config NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    modulo VARCHAR2(100) NOT NULL,
    nivel_severidad VARCHAR2(50) CHECK (nivel_severidad IN ('Bajo', 'Medio', 'Alto', 'Crítico')),
    activar_auditoria CHAR(1) CHECK (activar_auditoria IN ('S', 'N')) DEFAULT 'S',
    ultima_actualizacion DATE DEFAULT SYSDATE NOT NULL
);

-- Relaciones con módulos existentes (si aplica)
ALTER TABLE auditoria_eventos ADD CONSTRAINT fk_modulo FOREIGN KEY (modulo_afectado) REFERENCES configuracion_auditoria(modulo);

-- Vistas para generación de reportes predefinidos
CREATE OR REPLACE VIEW vista_reportes_diarios AS
SELECT * FROM reportes WHERE tipo_reporte = 'Diario';

CREATE OR REPLACE VIEW vista_reportes_mensuales AS
SELECT * FROM reportes WHERE tipo_reporte = 'Mensual';

-- Procedimientos para generación de reportes
CREATE OR REPLACE PROCEDURE generar_reporte (
    p_titulo IN VARCHAR2,
    p_descripcion IN CLOB,
    p_tipo_reporte IN VARCHAR2,
    p_modulo_origen IN VARCHAR2
) AS
BEGIN
    INSERT INTO reportes (titulo, descripcion, tipo_reporte, modulo_origen, estado)
    VALUES (p_titulo, p_descripcion, p_tipo_reporte, p_modulo_origen, 'Pendiente');
    COMMIT;
END;
/

-- Procedimiento para auditoría automática
CREATE OR REPLACE PROCEDURE registrar_evento (
    p_usuario IN VARCHAR2,
    p_accion IN VARCHAR2,
    p_modulo_afectado IN VARCHAR2,
    p_detalle_evento IN CLOB,
    p_nivel_severidad IN VARCHAR2
) AS
BEGIN
    INSERT INTO auditoria_eventos (usuario, accion, modulo_afectado, detalle_evento, nivel_severidad)
    VALUES (p_usuario, p_accion, p_modulo_afectado, p_detalle_evento, p_nivel_severidad);
    COMMIT;
END;
/

-- Triggers para auditorías automáticas
CREATE OR REPLACE TRIGGER auditoria_trigger
AFTER INSERT OR UPDATE OR DELETE ON reportes
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_eventos (usuario, accion, modulo_afectado, detalle_evento, nivel_severidad)
    VALUES (USER, 'Modificación en reportes', 'Reportes', 'Cambio detectado en reportes.', 'Medio');
END;
/

-- Índices para optimización
CREATE INDEX idx_fecha_evento ON auditoria_eventos (fecha_evento);
CREATE INDEX idx_modulo_origen ON reportes (modulo_origen);
