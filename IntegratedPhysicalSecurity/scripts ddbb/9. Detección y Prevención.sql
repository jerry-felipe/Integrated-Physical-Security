-- 1. Creación de tablas relacionadas con la detección y prevención

CREATE TABLE Patrullas (
    patrulla_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(255),
    tipo VARCHAR2(50) CHECK (tipo IN ('Virtual', 'Física')),
    estado VARCHAR2(50) CHECK (estado IN ('Activa', 'Inactiva')),
    fecha_creacion DATE DEFAULT SYSDATE
);

CREATE TABLE Amenazas (
    amenaza_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(255),
    nivel_riesgo NUMBER CHECK (nivel_riesgo BETWEEN 1 AND 5),
    fecha_detectada DATE DEFAULT SYSDATE,
    estado VARCHAR2(50) CHECK (estado IN ('Activa', 'Mitigada')),
    origen VARCHAR2(100) CHECK (origen IN ('Interno', 'Externo'))
);

CREATE TABLE EventosIA (
    evento_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amenaza_id NUMBER REFERENCES Amenazas(amenaza_id),
    patron_detectado VARCHAR2(255),
    algoritmo_utilizado VARCHAR2(100),
    confianza NUMBER CHECK (confianza BETWEEN 0 AND 1),
    fecha_evento DATE DEFAULT SYSDATE
);

CREATE TABLE RiesgosExternos (
    riesgo_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descripcion VARCHAR2(255),
    tipo VARCHAR2(100) CHECK (tipo IN ('Ataque', 'Vandalismo', 'Espionaje')),
    nivel_riesgo NUMBER CHECK (nivel_riesgo BETWEEN 1 AND 5),
    fecha_detectada DATE DEFAULT SYSDATE
);

-- 2. Relación con registros de auditoría y notificaciones

CREATE TABLE AuditoriaAmenazas (
    auditoria_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amenaza_id NUMBER REFERENCES Amenazas(amenaza_id),
    accion VARCHAR2(100),
    usuario VARCHAR2(100),
    fecha_accion DATE DEFAULT SYSDATE
);

CREATE TABLE NotificacionesAmenazas (
    notificacion_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amenaza_id NUMBER REFERENCES Amenazas(amenaza_id),
    mensaje VARCHAR2(255),
    usuario_destino VARCHAR2(100),
    fecha_envio DATE DEFAULT SYSDATE,
    estado VARCHAR2(50) CHECK (estado IN ('Enviada', 'Pendiente'))
);

-- 3. Procedimientos para detección y prevención

CREATE OR REPLACE PROCEDURE registrar_amenaza (
    p_tipo IN VARCHAR2,
    p_descripcion IN VARCHAR2,
    p_nivel_riesgo IN NUMBER,
    p_origen IN VARCHAR2
) AS
BEGIN
    INSERT INTO Amenazas (tipo, descripcion, nivel_riesgo, origen, estado)
    VALUES (p_tipo, p_descripcion, p_nivel_riesgo, p_origen, 'Activa');

    -- Registro en auditoría
    INSERT INTO AuditoriaAmenazas (amenaza_id, accion, usuario)
    VALUES (SEQ_CURRVAL('Amenazas'), 'Registro de amenaza', USER);
END;
/

CREATE OR REPLACE PROCEDURE notificar_amenaza (
    p_amenaza_id IN NUMBER,
    p_mensaje IN VARCHAR2,
    p_usuario_destino IN VARCHAR2
) AS
BEGIN
    INSERT INTO NotificacionesAmenazas (amenaza_id, mensaje, usuario_destino, estado)
    VALUES (p_amenaza_id, p_mensaje, p_usuario_destino, 'Pendiente');
END;
/

-- 4. Trigger para notificar al detectar amenazas

CREATE OR REPLACE TRIGGER trg_notificar_amenaza
AFTER INSERT ON Amenazas
FOR EACH ROW
BEGIN
    INSERT INTO NotificacionesAmenazas (amenaza_id, mensaje, usuario_destino, estado)
    VALUES (:NEW.amenaza_id, 'Nueva amenaza detectada: ' || :NEW.descripcion, 'EquipoSeguridad', 'Pendiente');
END;
/

-- 5. Procedimientos para análisis con IA

CREATE OR REPLACE PROCEDURE registrar_evento_ia (
    p_amenaza_id IN NUMBER,
    p_patron_detectado IN VARCHAR2,
    p_algoritmo_utilizado IN VARCHAR2,
    p_confianza IN NUMBER
) AS
BEGIN
    INSERT INTO EventosIA (amenaza_id, patron_detectado, algoritmo_utilizado, confianza)
    VALUES (p_amenaza_id, p_patron_detectado, p_algoritmo_utilizado, p_confianza);

    -- Registro en auditoría
    INSERT INTO AuditoriaAmenazas (amenaza_id, accion, usuario)
    VALUES (p_amenaza_id, 'Evento detectado por IA', USER);
END;
/

-- 6. Vistas para monitoreo y análisis

CREATE OR REPLACE VIEW vw_resumen_amenazas AS
SELECT
    a.amenaza_id,
    a.tipo,
    a.descripcion,
    a.nivel_riesgo,
    a.fecha_detectada,
    COUNT(e.evento_id) AS total_eventos_ia
FROM
    Amenazas a
LEFT JOIN
    EventosIA e ON a.amenaza_id = e.amenaza_id
GROUP BY
    a.amenaza_id, a.tipo, a.descripcion, a.nivel_riesgo, a.fecha_detectada;

-- 7. Reportes

CREATE OR REPLACE PROCEDURE generar_reporte_amenazas AS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Reporte de Amenazas Activas:');
    FOR r IN (SELECT * FROM vw_resumen_amenazas WHERE estado = 'Activa') LOOP
        DBMS_OUTPUT.PUT_LINE('Amenaza ID: ' || r.amenaza_id || ' - Tipo: ' || r.tipo || ' - Descripción: ' || r.descripcion || ' - Nivel de Riesgo: ' || r.nivel_riesgo);
    END LOOP;
END;
/
